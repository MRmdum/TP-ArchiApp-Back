Nous allons maintenant ajouter une "route", c'est-à-dire une requête HTTP que votre application va accepter et traiter. Une route est constituée de deux éléments : un verbe HTTP (par exemple : GET, POST, PUT…) et un chemin (par exemple : /voici/un/chemin, /chemin, /un/autre/long/chemin…).

Ajouter juste avant app.listen(...) la route suivante, qui définit que l'application accepte une requête GET sur le chemin /test/[quelquechose]
On peut donc ajouter du texte quelconque après /test/ et la route sera reconnue
Donc quelque chose comme https://l-adresse-generee-par-repl-it/test/blihblahblih]]
?
1
2
3
app.get('/test/*', function(req, res) {
    //ici construire la réponse HTTP
});
La fonction (non-nommée) est appelée quand un client se connecte à l'adresse en question. Le corps de la fonction a accès aux deux variables passées en argument: req et res. Le premier contient les infos de la requête, le deuxième est l'objet réponse à construire. Il possède une méthode très utile: res.json(objet-javascript) qui construit une réponse HTTP contenant un fichier JSON décrivant l'objet passé en argument.

Utilisez cette méthode pour rendre un object javascript, par exemple {"a": 1, "b" : 2}. Dans la suite, essayez aussi avec ["Hello", "World"]. Et avec 42.
Appuyez (ou ré-appuyez) sur "Run".
Allez à l'url de votre site en demandant la ressource "/test/quelquechose" et observez le résultat.
Notez que le fichier JSON retourné correspond à l'objet passé en argument.
On va maintenant utiliser ce qui est passé dans l'adresse.
Si on a /test/blihblah, on veut retourner l'objet {"msg": "blihblah"}
req.url contient la chaine "test/blihblah"
Pour une sous-chaine: https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/String/substr
Note
Quand vous faites des changements dans index.js, il faut "relancer" NodeJS en appuyant sur "Run"

2.3 - Un micro-service avec un état
Nous allons réaliser un micro-service maintenant un état au sein du serveur. L'état sera un entier, initialisé à zéro au démarrage du serveur.

On veut deux routes /cpt/inc et /cpt/query, avec les comportements suivant:

/cpt/query : rends un fichier json avec la valeur du compteur
/cpt/inc : incrémente de 1 la valeur du compteur, retourne un fichier json avec l'objet {"code" : 0}
/cpt/inc?v=XXX : deux cas :
XXX est bien un entier : incrémente de XXX la valeur du compteur et retourne un fichier json avec l'objet {"code" : 0}
XXX n'est pas un entier : ne touche pas au compteur et retourne {"code" : -1}
Vérifiez que vous pouvez incrémenter le compteur de l'un-e de vos collègue, et inversement.